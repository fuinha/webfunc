/**
 * Copyright (c) 2018, Neap Pty Ltd.
 * All rights reserved.
 * 
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
*/
const fetch = require('node-fetch')
const opn = require('opn')
const { encode: encodeQuery, stringify: formUrlEncode } = require('querystring')
const { info, highlight, cmd, link, debugInfo, bold } = require('../../utils/console')
const { promise } = require('../../utils/index')

// OAUTH
const OAUTH_TOKEN_URL = 'https://www.googleapis.com/oauth2/v4/token'
const GCP_CONSENT_PAGE = 'https://accounts.google.com/o/oauth2/v2/auth'
// RESOURCE MANAGER
const LIST_PROJECTS_URL = 'https://cloudresourcemanager.googleapis.com/v1/projects'
// BUCKET
const CREATE_BUCKET_URL = 'https://www.googleapis.com/storage/v1/b?project='
const UPLOAD_TO_BUCKET_URL = 'https://www.googleapis.com/upload/storage/v1/b'

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////
//////											START - UTILS
//////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const showDebug = (msg, options={ debug:false }) => {
	const { debug } = options || {}
	if (debug)
		console.log(debugInfo(msg))
}

const validateRequiredParams = (params={}) => Object.keys(params).forEach(p => {
	if (!params[p])
		throw new Error(`Parameter '${p}' is required.`)
})

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////
//////											END - UTILS
//////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////
//////											START - OAUTH TOKEN APIS
//////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const getOAuthToken = ({ code, client_id, client_secret, redirect_uri }, options={ debug:false }) => Promise.resolve(null).then(() => {
	showDebug('Requesting new OAuth token from Google Cloud Platform.', options)
	validateRequiredParams({ code, client_id, client_secret, redirect_uri })
	const body = formUrlEncode({
		code,
		client_id,
		client_secret,
		redirect_uri,
		grant_type: 'authorization_code'
	})

	return fetch(OAUTH_TOKEN_URL, {
		method: 'POST',
		headers: {
			'content-type': 'application/x-www-form-urlencoded',
			'content-length': body.length
		},
		body
	}).then(res => res.json().then(data => ({ status: res.status, data })))

	// const request = axios.create({
	// 	headers: {
	// 		'content-type': 'application/x-www-form-urlencoded',
	// 		'content-length': body.length
	// 	}
	// })
	
	// return request.post(OAUTH_TOKEN_URL, body)
})

const refreshOAuthToken = ({ refresh_token, client_id, client_secret }, options={ debug:false }) => {
	showDebug('Requesting a refresh of existing OAuth token from Google Cloud Platform.', options)
	validateRequiredParams({ refresh_token, client_id, client_secret })
	const body = formUrlEncode({
		refresh_token,
		client_id,
		client_secret,
		grant_type: 'refresh_token',
	})

	return fetch(OAUTH_TOKEN_URL, {
		method: 'POST',
		headers: {
			'content-type': 'application/x-www-form-urlencoded',
			'content-length': body.length
		},
		body
	}).then(res => res.json().then(data => ({ status: res.status, data })))

	// const request = axios.create({
	// 	headers: {
	// 		'content-type': 'application/x-www-form-urlencoded',
	// 		'content-length': body.length
	// 	}
	// })

	// return request.post(OAUTH_TOKEN_URL, body)
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////
//////											END - OAUTH TOKEN APIS
//////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////
//////											START - CONSENT APIS
//////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const requestConsent = ({ client_id, redirect_uri, scope }, stopFn, timeout, options={ debug:false }) => Promise.resolve(null).then(() => {
	showDebug('Opening default browser on the Google Cloud Platform Consent page.', options)
	validateRequiredParams({ client_id, redirect_uri, scope })
	const query = encodeQuery({
		client_id,
		redirect_uri,
		response_type: 'code',
		scope,
		access_type: 'offline',
		prompt: 'consent'
	})

	const googleConsentScreenUrl = `${GCP_CONSENT_PAGE}?${query}`

	if(process.platform === 'darwin' || process.platform === 'win32') {
		opn(googleConsentScreenUrl)
		console.log(info('A Google Accounts login window has been opened in your default browser. Please log in there and check back here afterwards.'))
	} else {
		console.log(info(
			`We'll need you to grant us access to provision your ${highlight('Google Cloud Platform')} account in order to comunicate with their API.`,
			`To provision a dedicated set of tokens for ${cmd('webfunc')}, Go to ${link(googleConsentScreenUrl)} and grant access to Webfunc.`
		))
		throw new Error(`Can't browse to consent screen from platform ${process.platform} (currently supported platforms: 'darwin', 'win32').`)
	}
})
	.then(() => promise.wait(stopFn, timeout)) 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////
//////											END - CONSENT APIS
//////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////
//////											START - PROJECT APIS
//////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const listProjects = (token, options={ debug:false }) => Promise.resolve(null).then(() => {
	showDebug('Requesting a list of all projects from Google Cloud Platform.', options)
	validateRequiredParams({ token })

	return fetch(LIST_PROJECTS_URL, {
		method: 'GET',
		headers: {
			Accept: 'application/json',
			Authorization: `Bearer ${token}`
		}
	}).then(res => res.json().then(data => ({ status: res.status, data })))
})

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////
//////											END - PROJECT APIS
//////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////
//////											START - BUCKET APIS
//////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const createBucket = (name, projectId, token, options={ debug:false }) => Promise.resolve(null).then(() => {
	validateRequiredParams({ name, token })
	showDebug(`Creating a new bucket called ${bold(name)} in Google Cloud Platform's project ${bold(projectId)}.`, options)

	// const request = axios.create({
	// 	headers: {
	// 		'Content-Type': 'application/json',
	// 		Authorization: `Bearer ${token}`
	// 	}
	// })

	return fetch(`${CREATE_BUCKET_URL}${projectId}`, {
		method: 'POST',
		headers: {
			'Content-Type': 'application/json',
			Authorization: `Bearer ${token}`
		},
		body: JSON.stringify({ name })
	}).then(res => res.json().then(data => ({ status: res.status, data }))).then(res => {
		if (res && res.status == 409)
			showDebug(`Bucket ${bold(name)} already exists.`, options)
	}).catch(e => {
		if ((e.message || '').indexOf('409') >= 0)
			showDebug(`Bucket ${bold(name)} already exists.`, options)
		else
			throw e
	})

	// return request.post(`${CREATE_BUCKET_URL}${projectId}`, { name }).then(res => {
	// 	if (res && res.status == 409)
	// 		showDebug(`Bucket ${bold(name)} already exists.`, options)
	// }).catch(e => {
	// 	if ((e.message || '').indexOf('409') >= 0)
	// 		showDebug(`Bucket ${bold(name)} already exists.`, options)
	// 	else
	// 		throw e
	// })
})

const uploadZipFileToBucket = (zip, bucket, token, options={ debug:false }) => Promise.resolve(null).then(() => {
	const { name: zipName, file: zipFile  } = zip || {}
	const { name: bucketName, projectId } = bucket || {}
	validateRequiredParams({ zipName, zipFile, bucketName, projectId, token })
	showDebug(`Uploading a new zip file to Google Cloud Platform's project ${bold(bucket.projectId)} in bucket ${bold(bucket.name)}.`, options)

	const query = `uploadType=media&name=${encodeURIComponent(zip.name)}&project=${encodeURIComponent(bucket.projectId)}`
	const uri = `${UPLOAD_TO_BUCKET_URL}/${encodeURIComponent(bucket.name)}/o`
	const fullUri = `${uri}?${query}`

	return fetch(fullUri, {
		method: 'POST',
		headers: {
			'Content-Type': 'application/zip',
			'Content-Length': zip.file.length,
			Authorization: `Bearer ${token}`
		},
		body: zip.file
	})
})

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////
//////											END - BUCKET APIS
//////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

module.exports = {
	oAuthToken: {
		'get': getOAuthToken,
		refresh: refreshOAuthToken
	},
	consent: {
		request: requestConsent
	},
	project: {
		list: listProjects
	},
	bucket: {
		create: createBucket,
		uploadZip: uploadZipFileToBucket
	}
}

